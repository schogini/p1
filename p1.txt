node {  
  stage 'Checkout'
  git url: 'https://github.com/papaludwig/jenkins-docker-example.git'  

  stage 'Build'
  docker.build('mobycounter')  

  stage 'Deploy'  
  sh './deploy.sh'
}



node {  
  stage 'Checkout'
  git url: 'https://github.com/schogini/p1.git'  

  stage 'Build' 
  def customImage = docker.build("my-image:${env.BUILD_ID}")
  // #https://www.jenkins.io/doc/book/pipeline/docker/
  // #def customImage = docker.build("my-image:${env.BUILD_ID}", "-f ${dockerfile} ./dockerfiles")

  stage 'Test' 
    sh "./t1.sh ${env.BUILD_ID} my-image:${env.BUILD_ID}"

   stage('Test2') {

        when {
            // Only say hello if a "greeting" is requested
            // expression { params.REQUESTED_ACTION == 'greeting' }
            echo 'Hello World'
        }
                
        steps {
            // echo 'Hello World'
            aa = sh "./t1.sh ${env.BUILD_ID} my-image:${env.BUILD_ID}"
        }
    }

}

NO ERROR
========
node {  
  stage 'Checkout'
  	git url: 'https://github.com/schogini/p1.git'  

  stage 'Build' 
  	docker.build("my-image:${env.BUILD_ID}")

  stage 'Test' //{
    // sh "./t1.sh ${env.BUILD_ID} my-image:${env.BUILD_ID}"
    GIT_BRANCH = sh(returnStdout: true, script: "./t1.sh ${env.BUILD_ID} my-image:${env.BUILD_ID}").trim()
  //}

   stage('Deploy') //{
    	//when ('aa' == 'master') {
        //	echo 'Only when test succeeds'
       	// }
   		//steps {
   			sh "cat result.txt"
            echo "Hello World2 ${GIT_BRANCH}"
        //}
    //}
}


node {  
  stage 'Checkout'
  	git url: 'https://github.com/schogini/p1.git'  

  stage 'Build' 
  	docker.build("my-image:${env.BUILD_ID}")

  stage 'Test'
    env.TEST = sh(returnStdout: true, script: "./t1.sh ${env.BUILD_ID} my-image:${env.BUILD_ID}").trim()

   stage 'Deploy'
	// sh "cat result.txt"
	if (env.TEST == "SUCCESS") {
		echo "Test Succeeded..  ${env.TEST}"
		// echo "${env.TEST}"
		// docker.tag("my-image:${env.BUILD_ID}", "schogini/my-image:${env.BUILD_ID}")
		docker tag "my-image:${env.BUILD_ID}" "schogini/my-image:${env.BUILD_ID}"
		//docker push schogini/tmp-img:$WEB
		docker service create --name tmp-svc --replicas 2 --publish 8080:8123 --env WEB=${env.BUILD_ID}" schogini/"schogini/my-image:${env.BUILD_ID}"
	} else {
		echo "Hello World3 ${env.TEST}"
	}
}

FINAL WORKED!!!!

node {  
  stage 'Checkout'
  	git url: 'https://github.com/schogini/p1.git'  

  stage 'Build' 
  	docker.build("my-image:${env.BUILD_ID}")

  stage 'Test'
    env.TEST = sh(returnStdout: true, script: "./t1.sh ${env.BUILD_ID} my-image:${env.BUILD_ID}").trim()

   stage 'Deploy'
	if (env.TEST == "SUCCESS") {

		echo "Test Succeeded..  ${env.TEST}"

		sh "docker tag my-image:${env.BUILD_ID} schogini/my-image:${env.BUILD_ID}"

		env.SVC = sh(returnStdout: true, script: "docker service ls|grep -c tmp-svc").trim()

		// --update-delay
		
		if (env.SVC == "1") {
			echo "Doing a Rolling Update..  ${env.TEST}"
			sh "docker service update --env-add WEB=${env.BUILD_ID} --image schogini/my-image:${env.BUILD_ID} tmp-svc"
		} else {
			echo "Deploying Application..  ${env.TEST}"
			sh "docker service create --name tmp-svc --replicas 2 --publish 8080:8123 --env WEB=${env.BUILD_ID} schogini/my-image:${env.BUILD_ID}"
		}
	} else {
		echo "Test Failed Aborting.. ${env.TEST}"
	}
}





pipeline {
    agent any
    parameters {

    }
    stages {
	    stage('Checkout') {
	        git url: 'https://github.com/schogini/p1.git'
	    }
        stage ('Build') {
        	docker.build("my-image:${env.BUILD_ID}")
        }
        stage ('Test') {
            when {
                // expression { params.REQUESTED_ACTION == 'greeting' }
                // expression { return readFile('pom.xml').contains('mycomponent') }
            }
            steps {
                echo "Hello1!"
            }
        }
    }
}
