node {  
  stage 'Checkout'
  git url: 'https://github.com/papaludwig/jenkins-docker-example.git'  

  stage 'Build'
  docker.build('mobycounter')  

  stage 'Deploy'  
  sh './deploy.sh'
}



node {  
  stage 'Checkout'
  git url: 'https://github.com/schogini/p1.git'  

  stage 'Build' 
  def customImage = docker.build("my-image:${env.BUILD_ID}")
  // #https://www.jenkins.io/doc/book/pipeline/docker/
  // #def customImage = docker.build("my-image:${env.BUILD_ID}", "-f ${dockerfile} ./dockerfiles")

  stage 'Test' 
    sh "./t1.sh ${env.BUILD_ID} my-image:${env.BUILD_ID}"

   stage('Test2') {

        when {
            // Only say hello if a "greeting" is requested
            // expression { params.REQUESTED_ACTION == 'greeting' }
            echo 'Hello World'
        }
                
        steps {
            // echo 'Hello World'
            aa = sh "./t1.sh ${env.BUILD_ID} my-image:${env.BUILD_ID}"
        }
    }

}

NO ERROR
========
node {  
  stage 'Checkout'
  	git url: 'https://github.com/schogini/p1.git'  

  stage 'Build' 
  	docker.build("my-image:${env.BUILD_ID}")

  stage 'Test' //{
    // sh "./t1.sh ${env.BUILD_ID} my-image:${env.BUILD_ID}"
    GIT_BRANCH = sh(returnStdout: true, script: "./t1.sh ${env.BUILD_ID} my-image:${env.BUILD_ID}").trim()
  //}

   stage('Deploy') //{
    	//when ('aa' == 'master') {
        //	echo 'Only when test succeeds'
       	// }
   		//steps {
   			sh "cat result.txt"
            echo "Hello World2 ${GIT_BRANCH}"
        //}
    //}
}


node {  
  stage 'Checkout'
  	git url: 'https://github.com/schogini/p1.git'  

  stage 'Build' 
  	docker.build("my-image:${env.BUILD_ID}")

  stage 'Test'
    env.TEST = sh(returnStdout: true, script: "./t1.sh ${env.BUILD_ID} my-image:${env.BUILD_ID}").trim()

   stage 'Deploy'
	// sh "cat result.txt"
	if (env.TEST == "SUCCESS") {
		echo "Test Succeeded..  ${env.TEST}"
		// echo "${env.TEST}"
		// docker.tag("my-image:${env.BUILD_ID}", "schogini/my-image:${env.BUILD_ID}")
		docker tag "my-image:${env.BUILD_ID}" "schogini/my-image:${env.BUILD_ID}"
		//docker push schogini/tmp-img:$WEB
		docker service create --name tmp-svc --replicas 2 --publish 8080:8123 --env WEB=${env.BUILD_ID}" schogini/"schogini/my-image:${env.BUILD_ID}"
	} else {
		echo "Hello World3 ${env.TEST}"
	}
}

FINAL WORKED!!!!

node {  
  stage 'Checkout'
  	git url: 'https://github.com/schogini/p1.git'  

  stage 'Build' 
  	docker.build("my-image:${env.BUILD_ID}")

  stage 'Test'
    env.TEST = sh(returnStdout: true, script: "./t1.sh ${env.BUILD_ID} my-image:${env.BUILD_ID}").trim()

   stage 'Deploy'
	if (env.TEST == "SUCCESS") {

		echo "Test Succeeded..  ${env.TEST}"

		sh "docker tag my-image:${env.BUILD_ID} schogini/my-image:${env.BUILD_ID}"

		env.SVC = sh(returnStdout: true, script: "docker service ls|grep -c tmp-svc").trim()

		// --update-delay
		
		if (env.SVC == "1") {
			echo "Doing a Rolling Update..  ${env.TEST}"
			sh "docker service update --env-add WEB=${env.BUILD_ID} --image schogini/my-image:${env.BUILD_ID} tmp-svc"
		} else {
			echo "Deploying Application..  ${env.TEST}"
			sh "docker service create --name tmp-svc --replicas 2 --publish 8080:8123 --env WEB=${env.BUILD_ID} schogini/my-image:${env.BUILD_ID}"
		}
	} else {
		echo "Test Failed Aborting.. ${env.TEST}"
	}
}





pipeline {
    agent any
    parameters {

    }
    stages {
	    stage('Checkout') {
	        git url: 'https://github.com/schogini/p1.git'
	    }
        stage ('Build') {
        	docker.build("my-image:${env.BUILD_ID}")
        }
        stage ('Test') {
            when {
                // expression { params.REQUESTED_ACTION == 'greeting' }
                // expression { return readFile('pom.xml').contains('mycomponent') }
            }
            steps {
                echo "Hello1!"
            }
        }
    }
}


node{
   stage('SCM Checkout'){
       git credentialsId: 'git-creds', url: 'https://github.com/javahometech/my-app'
   }
   stage('Mvn Package'){
     def mvnHome = tool name: 'maven-3', type: 'maven'
     def mvnCMD = "${mvnHome}/bin/mvn"
     sh "${mvnCMD} clean package"
   }
   stage('Build Docker Image'){
     sh 'docker build -t kammana/my-app:2.0.0 .'
   }
   stage('Push Docker Image'){
     withCredentials([string(credentialsId: 'docker-pwd', variable: 'dockerHubPwd')]) {
        sh "docker login -u kammana -p ${dockerHubPwd}"
     }
     sh 'docker push kammana/my-app:2.0.0'
   }
   stage('Run Container on Dev Server'){
     def dockerRun = 'docker run -p 8080:8080 -d --name my-app kammana/my-app:2.0.0'
     sshagent(['dev-server']) {
       sh "ssh -o StrictHostKeyChecking=no ec2-user@172.31.18.198 ${dockerRun}"
     }
   }
}



pipeline {  environment {
    registry = "docker_hub_account/repository_name"
    registryCredential = 'dockerhub'
  }  agent any  stages {
    stage('Building image') {
      steps{
        script {
          docker.build registry + ":$BUILD_NUMBER"
        }
      }
    }
  }
}


pipeline {
  environment {
    registry = "schogini/my-image"
    registryCredential = "docker-hub"
    dockerImage = ''
  }

  agent any

  stages {

	    stage('Cloning Git') {
	      steps {
	        git 'https://github.com/schogini/p1.git'
	      }
	    }
	    stage('Building image') {
	      steps{
	        script {
	          dockerImage = docker.build registry + ":$BUILD_NUMBER"
	        }
	      }
	    }
	    stage('Testing image') {
	      steps{
	        script {
	          env.TEST = sh(returnStdout: true, script: "./t1.sh ${env.BUILD_ID} ${env.registry}:${env.BUILD_ID}").trim()

				if (env.TEST != "SUCCESS") {
					currentBuild.result = 'ABORTED'
					error("Test Failed Aborting.. ${env.TEST}")

					sh "curl -X POST -H 'Content-type: application/json' --data '{\"text\":\"Build ${env.BUILD_ID} Failed!\"}' https://hooks.slack.com/services/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"

				}else{
					//B016C2EFAP7
					//C017ACUDN77
					sh "curl -X POST -H 'Content-type: application/json' --data '{\"text\":\"Build ${env.BUILD_ID} Succeeded!\"}' https://hooks.slack.com/services/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"

				
				}
	        }
	      }
	    }
		stage('Pushing Image') {
			steps{    
				script {
			  		docker.withRegistry( '', registryCredential ) {
			    		dockerImage.push()
			  		}
				}
			}
		}  
		stage('Deploy Image') {
			steps{    
				script {
					sh "./deploy.sh schogini/my-image:${env.BUILD_ID} ${env.BUILD_ID}"
					currentBuild.result = 'SUCCESS'
				}
			}
		}  
		stage('Remove Unused docker image') {
		  steps{
		    sh "docker rmi $registry:$BUILD_NUMBER"
		  }
		}   
	}
}

#test
https://hooks.slack.com/services/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

curl -X POST -H 'Content-type: application/json' --data '{"text":"Build 1 Succeeded!"}' https://hooks.slack.com/services/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

https://sree2c.slack.com/archives/C017ACUDN77